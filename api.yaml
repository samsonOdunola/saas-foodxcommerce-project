swagger: "2.0"
info:
  title: saas Food Commerce App
  description: This is the collection of API's for saaas food commerce application
  version: 1.0
  termsOfService: http://swagger.io/terms/
  contact:
    email: odunolasamson@yahoo.com
  licence:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  servers:
    - url: "http://localhost:3000/api/v1"
      description: This is my local server
    - url: "xxxxxxxxxxx"
      description: This is the deployed server
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
tags:
  - name: Staff
    description: Everything about Staff
  - name: Customer
    description: Everything about customers
  - name: Product
    description: Everything about suppliers
  - name: Role
    description: Everything about roles
  - name: Order
    description: Everything about orders
  - name: Logistics
    description: Everything about logistics and delivery
  - name: Permissions
    description: Everything about roles ad Permissions
  - name: Transactions
    description: Everything about transactions
  - name: Checkout
    description: Checkout API's
  - name: Review
    description: All about reviews
  - name: Cart
    description: All about Carts
schemes: [http, https]
host: localhost:3000
basePath: /api/v1
paths:
  /staff:
    post:
      description: Create a new staff resource
      tags: 
        - Staff
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: body  
          name: staff
          description: The staff to create.
          schema:
            $ref: '#/definitions/staff'            
      responses:
        201:
          description: The staff object created
          schema:
            type: object
            properties: 
              success: 
                type: boolean
                example: true
              message:
                type: string
                example: Resource created
              data:
                type: object
                properties:
                  verified: 
                    type: boolean
                    example: false
                  verifiedPhoneNumber:
                    type: boolean
                    example: false
                  id:
                    type: Number
                    example: 2
                  firstName:
                    type: string
                    example: Sam
                  lastName:
                    type: string
                    example: john
                  middleName:
                    type: string
                    example: sarah
                  phoneNumber:
                    type: string
                    example: 1222322424
                  email:
                    type: string
                    example: john@example.com
                  passwordHash:
                    type: string
                    example: wddsfsfsfdfefafaDD#$#RFSS
                  verificationToken:
                    type: string
                    example: adadsdsdssdsdadadadssffs
                  updatedAt:
                    type: string
                    example: 2023-11-11T18:11:16.896Z
                  createdAt:
                    type: string
                    example: 2023-11-11T18:11:16.896Z
                  RoleId:
                    type: Number
                    example: 2
        400:
          description: Bad request error
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
                example: Error in creating Resource
              error:
                type: string 
              data:
                type: object  
        404:
          description: unauthorized Access
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string              
              error:
                type: string
              data: 
                type: object 
  /staff/?email&token:
    get:
      description: Verify Staff
      tags:
        - Staff
      produces:
        - application/json
      parameters:
        - in: query  
          name: email
          description: staff email.
        - in: query
          name: token
          description: staff verification token          
      responses:
        201:
          description: The staff object created
          schema:
            type: object
            properties: 
              success: 
                type: boolean
                example: true
              message:
                type: string
                example: Resource created
              data:
                type: object
                properties:
                  verified: 
                    type: boolean
                    example: false
                  verifiedPhoneNumber:
                    type: boolean
                    example: false
                  id:
                    type: Number
                    example: 2
                  firstName:
                    type: string
                    example: Sam
                  lastName:
                    type: string
                    example: john
                  middleName:
                    type: string
                    example: sarah
                  phoneNumber:
                    type: string
                    example: 1222322424
                  email:
                    type: string
                    example: john@example.com
                  passwordHash:
                    type: string
                    example: wddsfsfsfdfefafaDD#$#RFSS
                  verificationToken:
                    type: string
                    example: adadsdsdssdsdadadadssffs
                  updatedAt:
                    type: string
                    example: 2023-11-11T18:11:16.896Z
                  createdAt:
                    type: string
                    example: 2023-11-11T18:11:16.896Z
                  RoleId:
                    type: Number
                    example: 2              
        400:
          description: Bad request error
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
                example: Error in creating Resource
              error:
                type: string 
              data:
                type: object  
  /staff/login:
    get:
      description: Login Staff
      tags:
        - Staff
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: body  
          name: Log in details
          description: email and password of staff 
          required: true         
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string  
      responses:
        200:
          description: The staff object created
          schema:
            type: object
            properties: 
              success: 
                type: boolean
                example: true
              message:
                type: string
                example: Resource created              
              data:
                type: object
                properties:
                  verified: 
                    type: boolean
                    example: false
                  verifiedPhoneNumber:
                    type: boolean
                    example: false
                  id:
                    type: Number
                    example: 2
                  firstName:
                    type: string
                    example: Sam
                  lastName:
                    type: string
                    example: john
                  middleName:
                    type: string
                    example: sarah
                  phoneNumber:
                    type: string
                    example: 1222322424
                  email:
                    type: string
                    example: john@example.com
                  passwordHash:
                    type: string
                    example: wddsfsfsfdfefafaDD#$#RFSS
                  verificationToken:
                    type: string
                    example: adadsdsdssdsdadadadssffs
                  updatedAt:
                    type: string
                    example: 2023-11-11T18:11:16.896Z
                  createdAt:
                    type: string
                    example: 2023-11-11T18:11:16.896Z
                  RoleId:
                    type: Number
                    example: 2
              token:
                type: string
                example: wwdwdww9wwr383i202042b2292              
        400:
          description: Bad request error
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
                example: Error in creating Resource
              error:
                type: string 
              data:
                type: object  
  /staff/all:
    get:
      description: Return all staffs
      tags:
        - Staff
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/staffresponse'              
        404:
          description: unathorised access
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
  /staff/{userId}:
    put: 
      description: Modify Staff by Id
      tags:
        - Staff
      parameters:
        - in: path
          name: userId
          description: Id of staff
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: body
          name: user details
          required: true
          schema:
            type: object
            properties:
              firstName:
                type: string
              lastName:
                type: string
              middleName:
                type: string
              phoneNumber:
                type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/staffresponse'
        400:
          description: Not found
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error: 
                type: string
              data:
                type: object
        404:
          description: Unauthorized access
          schema: 
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
    delete: 
      description: Delete staff by Id
      tags:
        - Staff
      parameters:
        - in: path
          name: userId
          description: Id of staff
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/staffresponse'
        400:
          description: Not found
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error: 
                type: string
              data:
                type: object
        404:
          description: Unauthorized access
          schema: 
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
    get: 
      description: Get Staff by Id
      tags:
        - Staff
      parameters:
        - in: path
          name: userId
          description: Id of staff
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/staffresponse'
        400:
          description: Not found
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error: 
                type: string
              data:
                type: object
        404:
          description: Unauthorized access
          schema: 
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
  /staff/password/{userId}:
    put:
      description: Update staff password
      tags: 
        - Staff
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
       - in: path
         name: userId
         description: Id of staff
         required: true
         type: string
       - in: header
         name: Authorization
         required: true
         type: string
         example: Bearer Token 
       - in: body
         name: new Password
         required: true
         schema:
           type: object
           properties:
             newPassword:
               type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          description: Not found
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error: 
                type: string
              data:
                type: object
        404:
          description: Unauthorized access
          schema: 
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
  /staff/role:
    post:
      description: Ceate a new role
      tags:
        - Staff
        - Role
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: body
          name: role title
          required: true
          schema:
            type: object
            properties:
              title:
                type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  id:
                    type: string
                  title:
                    type: string
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
        404:
          description: unathorised access
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
  /staff/role/{roleId}:
    get:
      description: retrieve role by role id
      tags:
        - Staff
        - Permissions
        - Role
      produces:
        - application/json
      parameters:
        - in: path
          name: roleId
          description: Id of role
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
      responses:
        400:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  id:
                    type: number
                  title:
                    type: string
                  createdAt:
                    type: string
                  updatedAt:
                    type: string      
  /staff/role/all:
    get:
      description: Return all roles
      tags:
        - Staff
        - Permissions
        - Role
      parameters:
        - in: path
          name: roleId
          description: Id of role
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
      produces:
        - application/json
      responses:
        400:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  id:
                    type: number
                  title:
                    type: string
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
  /staff/role/permission/{roleId}:
    get:
      description: Returns a role.
      tags:
        - Role
        - Staff
        - Permissions
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: roleId
          description: Id of role
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: body
          name: permissions to add
          required: true
          schema:
            type: object
            properties:
              permissions:
                type: array
                items:
                  type: object
                  properties:
                    resource:
                      type: string
                    readOwn:
                      type: string
                    readAny:
                      type: string
                    write:
                      type: string
                    removeAny:
                      type: string
                    removeOwn:
                      type: string
                    updateAny:
                      type: string
                    updateown:
                      type: string  
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message: 
                type: string
              data:
                type: object
        400:
          description: Role not found
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
        404:
          description: Unauthorized access
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
    put:
      description: Update Role permissions.
      tags:
        - Role
        - Staff
        - Permissions
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: roleId
          description: Id of role
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: body
          name: permissions to add
          required: true
          schema:
            type: object
            properties:
              permissions:
                type: array
                items:
                  type: object
                  properties:
                    resource:
                      type: string
                    readOwn:
                      type: string
                    readAny:
                      type: string
                    write:
                      type: string
                    removeAny:
                      type: string
                    removeOwn:
                      type: string
                    updateAny:
                      type: string
                    updateown:
                      type: string  
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message: 
                type: string
              data:
                type: object
        400:
          description: Role not found
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
        404:
          description: Unauthorized access
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
    post:
      description: Add Permission to role.
      tags:
        - Role
        - Staff
        - Permissions
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: roleId
          description: Id of role
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: body
          name: permissions to add
          required: true
          schema:
            type: object
            properties:
              permissions:
                type: array
                items:
                  type: object
                  properties:
                    resource:
                      type: string
                    readOwn:
                      type: string
                    readAny:
                      type: string
                    write:
                      type: string
                    removeAny:
                      type: string
                    removeOwn:
                      type: string
                    updateAny:
                      type: string
                    updateown:
                      type: string  
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message: 
                type: string
              data:
                type: object
        400:
          description: Role not found
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
        404:
          description: Unauthorized access
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
  /Inventory/product:
    post:
      description: Create a new Product
      tags:
        - Product
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: body
          name: Product
          required: true
          description: Details of product to be created
          schema: 
            $ref: '#/definitions/product'
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/productresponse'
        404:
          description: Not Authorised
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
  /Inventory/product/{productId}:
    delete:
      description: Modifies a product by its product id
      tags:
        - Product
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: path
          name: productId
          required: true
          description: Id of product to be returned
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/productresponse'
        404:
          description: Not Authorised
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object 
    put:
      description: Modifies a product by its product id
      tags:
        - Product
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: path
          name: productId
          required: true
          description: Id of product to be returned
        - in: body
          name: Modification details
          required: true
          schema:
            type: object
            $ref: '#/definitions/product'          
          
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/productresponse'
        404:
          description: Not Authorised
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
    get:
      description: get a product by its product id
      tags:
        - Product
      produces:
        - application/json
      parameters:
        - in: path
          name: productId
          required: true
          description: Id of product to be returned
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/productresponse'
        404:
          description: Not Authorised
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
  /Inventory/product/all:
    get:
      description: Retrieves all Products
      produces:
        - application/json
      tags:
        - Product      
      responses:
        200:
          description: An array of product objects
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message: 
                type: string
              data:
                type: array
                items:
                  $ref: '#/definitions/productresponse'
  /product/like/{productId}:
    put:
      description: like a Product via product Id
      tags:
        - Product
        - Customer
      parameters:
        - in: path
          name: productId
          required: true
          type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          description: Bad request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
  /customer/signup:
    post:
      description: create a user
      tags:
        - Customer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          required: true
          schema:
            $ref: '#/definitions/customer'
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/customerResponse'
        400:
          description:
          schema:
            type: object
            properties:
              success: 
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object  
  /customer/verify?email&token:
    post:
      description: verify customer
      tags:
        - Customer
      produces:
        - application/json
      parameters:
        - in: query  
          name: email
          required: true
          description: Customer email.
        - in: query
          name: token
          required: true
          description: customer verification token
      responses:
        200:
          description: Customer verified
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/customerResponse'
        400:
          description: Error
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
  /customer/login:
    get:
      description: login customer
      tags:
        - Customer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: okay
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/customerResponse'
              token:
                type: string
        400:
          description: Not found
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
  /customer/address/{userId}:
    post:
      description: Create new Address
      tags:
        - Customer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: path
          name: userId
          required: true
          type: string          
        - in: body
          required: true
          schema:
            type: object
            properties:
              line1:
                type: string
              line2:
                type: string
              city:
                type: string
              state:
                type: string
              country:
                type: string
              nearerstLandmark:
                type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  id:
                    type: number
                  line1:
                    type: string
                  line2:
                    type: string
                  city:
                    type: string
                  state:
                    type: string
                  country:
                    type: string
                  nearerstLandmark:
                    type: string
                  defaultAddress: 
                    type: boolean
                  updatedAt:
                    type: string
                  createdAt:
                    type: string
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              error:
                type: string
              data:
                type: object
  /customer/address/{userId}/{addressId}:
    put:
      description: Update Address by id
      tags:
        - Customer
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: path
          name: userId
          required: true
          type: string 
        - in: path
          name: addressId
          required: true
          type: string  
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                $ref: '#definitions/addressResponse'
        400:
          $ref: '#/definitions/badRequestResponse'
        404:
          $ref: '#/definitions/notFoundErrorResponse'
        401:
          $ref: '#definitions/unauthorisedErrorResponse'
  /customer/order/{userId}:  
    get:
      description: Returns all Orders by User Id
      tags:
        - Customer
        - Order
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string  
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
        400:
          description: Bad Request
          schema:
            $ref: '#/definitions/badRequestResponse'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/notFoundErrorResponse'
        401:
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/unaauthorisedErrorResponse'  
  /customer/order/{userId}/{orderId}:  
    get:
      description: Returns a user order by order Id
      tags:
        - Customer
        - Order
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string  
        - in: path
          name: orderId
          required: true
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          $ref: '#/definitions/badRequestResponse'
        404:
          $ref: '#/definitions/notFoundErrorResponse'
        401:
          $ref: '#/definitions/unauthorisedErrorResponse'                   
  /customer/password/reset/{userId}:  
    put:
      description: Reset a customer password to a new password
      tags:
        - Customer       
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string          
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token
        - in: body
          required: true
          schema:
            type: object
            properties:
              newPassword:
                type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          $ref: '#/definitions/badRequestResponse'
        404:
          $ref: '#/definitions/notFoundErrorResponse'
        401:
          $ref: '#/definitions/unauthorisedErrorResponse'     
  /customer/reviews/{userId}:  
    get:
      description: Return all reviews by customer id
      tags:
        - Customer
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string          
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token        
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          $ref: '#/definitions/badRequestResponse'
        404:
          $ref: '#/definitions/notFoundErrorResponse'
        401:
          $ref: '#/definitions/unauthorisedErrorResponse'       
  /customer/{userId}:  
    get:
      description: Gets a customer by user Id
      tags:
        - Customer 
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string          
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token        
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                $ref: '#/definitions/customerResponse'
        400:
          $ref: '#/definitions/badRequestResponse'
        404:
          $ref: '#/definitions/notFoundErrorResponse'
        401:
          $ref: '#/definitions/unauthorisedErrorResponse'
  /customer/all:  
    get:
      description: Returns all customers
      tags:
        - Customer       
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer Token        
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  $ref: '#/definitions/cusrtomerResponse'
        400:
          $ref: '#/definitions/badRequestResponse'
        404:
          $ref: '#/definitions/notFoundErrorResponse'
        401:
          $ref: '#/definitions/unauthorisedErrorResponse'
  /checkout/{userId}:
    get: 
      description: Generate a new checkout instance from cart
      tags:
        - Customer
        - Checkout
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  productList:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        id:
                          type: number
                        sellingPrice:
                          type: number
                        discount:
                          type: number
                        image:
                          type: string
                        Cart_Item:
                          type: object
                          properties:
                            id: 
                              type: number
                            quantity:
                              type: number
                            createdAt:
                              type: string
                            updatedAt:
                              type: string
                            ProductId:
                              type: string
                            CartId:
                              type: number
                  userId:
                    type: string  
                  deliveryType:
                    type: string
                  paymentType:
                    type: string
                  customerAddress:
                    $ref: '#definitions/addressResponse'
                  subTotal:
                    type: number
                  totalItemQuantity:
                    type: number
                  deliveryFee:
                    type: number                
        400:    
          $ref: '#/definitions/badRequestResponse' 
        401:
          $ref: '#/definitions/notFoundErrorResponse'  
  /checkout/address/{userId}:
    put: 
      description: Modifies the address in checkout
      tags:
        - Customer
        - Checkout
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - in: body
          description: Cart Information
          required: true
          schema:
            type: object
            properties:
              productList:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    id:
                      type: number
                    sellingPrice:
                      type: number
                    discount:
                      type: number
                    image:
                      type: string
                    Cart_Item:
                      type: object
                      properties:
                        id: 
                          type: number
                        quantity:
                          type: number
                        createdAt:
                          type: string
                        updatedAt:
                          type: string
                        ProductId:
                          type: string
                        CartId:
                          type: number
              userId:
                type: string  
              deliveryType:
                type: string
              paymentType:
                type: string
              customerAddress:
                $ref: '#definitions/addressResponse'
              subTotal:
                type: number
              totalItemQuantity:
                type: number
              deliveryFee:
                type: number
              newAddressId:
                type: number            
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  productList:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        id:
                          type: number
                        sellingPrice:
                          type: number
                        discount:
                          type: number
                        image:
                          type: string
                        Cart_Item:
                          type: object
                          properties:
                            id: 
                              type: number
                            quantity:
                              type: number
                            createdAt:
                              type: string
                            updatedAt:
                              type: string
                            ProductId:
                              type: string
                            CartId:
                              type: number
                  userId:
                    type: string  
                  deliveryType:
                    type: string
                  paymentType:
                    type: string
                  customerAddress:
                    $ref: '#definitions/addressResponse'
                  subTotal:
                    type: number
                  totalItemQuantity:
                    type: number
                  deliveryFee:
                    type: number
        400:
          $ref: '#/definitions/badRequestResponse' 
        401:
          $ref: '#/definitions/notFoundErrorResponse'        
  /checkout/payment_method/{userId}:
    put: 
      description: Modifies the payment method of checkout
      tags:
        - Customer
        - Checkout
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - in: body
          description: Cart Information
          required: true
          schema:
            type: object
            properties:
              productList:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    id:
                      type: number
                    sellingPrice:
                      type: number
                    discount:
                      type: number
                    image:
                      type: string
                    Cart_Item:
                      type: object
                      properties:
                        id: 
                          type: number
                        quantity:
                          type: number
                        createdAt:
                          type: string
                        updatedAt:
                          type: string
                        ProductId:
                          type: string
                        CartId:
                          type: number
              userId:
                type: string  
              deliveryType:
                type: string
              paymentType:
                type: string
              customerAddress:
                $ref: '#definitions/addressResponse'
              subTotal:
                type: number
              totalItemQuantity:
                type: number
              deliveryFee:
                type: number
              newPaymentType:
                type: string            
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  productList:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        id:
                          type: number
                        sellingPrice:
                          type: number
                        discount:
                          type: number
                        image:
                          type: string
                        Cart_Item:
                          type: object
                          properties:
                            id: 
                              type: number
                            quantity:
                              type: number
                            createdAt:
                              type: string
                            updatedAt:
                              type: string
                            ProductId:
                              type: string
                            CartId:
                              type: number
                  userId:
                    type: string  
                  deliveryType:
                    type: string
                  paymentType:
                    type: string
                  customerAddress:
                    $ref: '#definitions/addressResponse'
                  subTotal:
                    type: number
                  totalItemQuantity:
                    type: number
                  deliveryFee:
                    type: number
        400:
          $ref: '#/definitions/badRequestResponse' 
        401:
          $ref: '#/definitions/notFoundErrorResponse'
  /checkout/delivery_type/{userId}:
    put: 
      description: Modifies thedelivery type of checkout
      tags:
        - Customer
        - Checkout
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - in: body
          description: Cart Information
          required: true
          schema:
            type: object
            properties:
              productList:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    id:
                      type: number
                    sellingPrice:
                      type: number
                    discount:
                      type: number
                    image:
                      type: string
                    Cart_Item:
                      type: object
                      properties:
                        id: 
                          type: number
                        quantity:
                          type: number
                        createdAt:
                          type: string
                        updatedAt:
                          type: string
                        ProductId:
                          type: string
                        CartId:
                          type: number
              userId:
                type: string  
              deliveryType:
                type: string
              paymentType:
                type: string
              customerAddress:
                $ref: '#definitions/addressResponse'
              subTotal:
                type: number
              totalItemQuantity:
                type: number
              deliveryFee:
                type: number
              newDeliveryType:
                type: string
                            
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  productList:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        id:
                          type: number
                        sellingPrice:
                          type: number
                        discount:
                          type: number
                        image:
                          type: string
                        Cart_Item:
                          type: object
                          properties:
                            id: 
                              type: number
                            quantity:
                              type: number
                            createdAt:
                              type: string
                            updatedAt:
                              type: string
                            ProductId:
                              type: string
                            CartId:
                              type: number
                  userId:
                    type: string  
                  deliveryType:
                    type: string
                  paymentType:
                    type: string
                  customerAddress:
                    $ref: '#definitions/addressResponse'
                  subTotal:
                    type: number
                  totalItemQuantity:
                    type: number
                  deliveryFee:
                    type: number
        400:
          $ref: '#/definitions/badRequestResponse' 
        401:
          $ref: '#/definitions/notFoundErrorResponse'
  /cart/{userId}/{productId}:
    put:
      description: Add product to Cart via customer id and product id
      tags:
        - Cart
        - Customer
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: string
        - in: path
          name: productId
          required: true
          type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
                properties:
                  id:
                    type: number
                  status:
                    type: string
                  createdAt:
                    type: string
                  updatedAt:
                    type: string
                  CustomerId:
                    type: number
        400:
          $ref: '#/definitions/badRequestResponse'  
  /cart/{userId}:
    get:
      description: Retrieve a Customers cart via user Id
      tags:
        - Cart
        - Customer
      parameters:
        - in: path
          name: userId
          required: true
          type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties: 
              success:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    id:
                      type: number
                    sellinPrice:
                      type: number
                    discount:
                      type: number
                    image:
                      type: number
                    Cart_Item:
                      type: object
                      properties:
                        id:
                          type: number
                        quantity:
                          type: number
                        createdAt:
                          type: string
                        updatedAt:
                          type: string
                        ProductId:
                          type: number
                        CartId:
                          type: number
        400:
          $ref: '#/definitions/badRequestResponse'               
  /cart/product/{userId}/{productId}/{action}:
    put:
      description: Increment or decrement cart item quantity
      tags:
        - Cart
        - Customer
      produces:
        - application/json
      parameters:
        - in: path
          name: userId
          required: true
          type: number
          description: Id of the customer
          example: 1
        - in: path
          name: productId
          required: true
          description: Id of the product
          type: number
          example: 1
        - in: path
          name: action
          required: true
          description: action to perform on cart item quantity
          type: string
          example: INCREMENT
      responses:
        200:
          description: okay
          schema:
            type: object
            properties: 
              success:
                type: boolean
              message:
                type: string
              data:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    id:
                      type: number
                    sellinPrice:
                      type: number
                    discount:
                      type: number
                    image:
                      type: number
                    Cart_Item:
                      type: object
                      properties:
                        id:
                          type: number
                        quantity:
                          type: number
                        createdAt:
                          type: string
                        updatedAt:
                          type: string
                        ProductId:
                          type: number
                        CartId:
                          type: number
        400:
          $ref: '#/definitions/badRequestResponse'
  /order/{userId}:
    post:
      description: Create an order for the specified user
      tags:
        - Order
        - Customer
      parameters:
        - in: path
          name: userId
          required: true
          description: Specified User
          type: string
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer <token>
        - in: body
          required: true
          description: Object generated from checkout
          schema:
            type: object
            properties:
              data:
                type: object
                properties:
                  productList:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                      id:
                        type: number
                      sellingPrice:
                        type: number
                      discount:
                        type: number
                      image:
                        type: string
                      Cart_Item:
                        type: object
                        properties:
                          id: 
                            type: number
                          quantity:
                            type: number
                          createdAt:
                            type: string
                          updatedAt:
                            type: string
                          ProductId:
                            type: string
                          CartId:
                            type: number
                  userId:
                    type: string  
                  deliveryType:
                    type: string
                  paymentType:
                    type: string
                  customerAddress:
                    $ref: '#definitions/addressResponse'
                  subTotal:
                    type: number
                  totalItemQuantity:
                    type: number
                  deliveryFee:
                    type: number
      responses:
  /order/verify/{transactionReference}:
    get:
      description: Verify order transactionn by transaction reference
      tags:
        - Order
        - Customer
      parameters:
        - in: path
          name: transactionReference
          description: Transaction reference string to verify 
          type: string
          required: true
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success: 
                type: boolean  
              message:
                type: string
              data:
                type: object
        400:
          description: bad request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
  /order/verify/shipment/{transactionReference}:
    get:
      description: Confirm Order shipment
      tags:
        - Customer
        - Order
        - Logistics
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer <token>
        - in: path
          name: transactionReference
          type: string
          description: transaction reference of order to be shipped
          required: true
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          description: Bad request
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
  /order/delivery/{transactionReference}:
    post:
      description: Initiatiate a shipment delivery
      tags:
        - Logistics
        - Order
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer <token>
        - in: path
          name: transactionReference
          required: true
          type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
    put:
      description: Confirm a shipment delivery
      tags:
        - Logistics
        - Order
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
          example: Bearer <token>
        - in: path
          name: transactionReference
          required: true
          type: string
        - in: body
          required: true
          schema:
            type: object
            properties:
              deliveryCode:
                type: string
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
  /review/{userId}/{productId}:
    post:
      description: Allow a user leave a review for a product via User id and Product Id
      tags:
        - Review
        - Customer
        - Product
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          example: Bearer <token>
        - in: path
          name: userId
          required: true
          type: string
        - in: path
          name: productId
          required: true
          type: string
        - in: body
          required: true
          schema:
            type: object
            properties:
              content:
                type: string
              rating:
                type: number
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object  
        400:
          description: Not 
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
  /review/{reviewId}:
    put:
      description: Update review content and rating
      tags:
        - Customer
        - Review
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          example: Bearer <token>
        - in: path
          name: reviewId
          required: true
          type: string
        - in: body
          required: true
          schema:
            type: object
            properties:
              content:
                type: string
              rating:
                type: number
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        401:
          description: Unauthorized
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          description: bad request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
    delete:
      description: Delete Review
      tags:
        - Customer
        - Review
      parameters:
        - in: header
          name: Authorization
          required: true
          example: Bearer <token>
        - in: path
          name: reviewId
          required: true
          type: string        
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        401:
          description: Unauthorized
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:  
          description: Unauthorized
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
  /review/all/?userId&productId:
    get:
      description: Return All reviews
      tags:
        - Customer
        - Review
        - Product
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          example: Bearer <token>
        - in: query
          name: userId          
          type: string
        - in: query
          name: productId          
          type: string        
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: array
        401:
          description: Unauthorized
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          description: Bad Request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
  /review/{userId}:
    get:
      description: Returns a users reviews
      tags:
        - Customer
        - Review
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          example: Bearer <token>
        - in: path
          name: userId
          required: true
          type: string        
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: array
        401:
          description: Unauthorized
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
        400:
          description: bad request
          schema:
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object  
  /promo:
    post:
      description: Create a new promo code
      tags: 
        - Promocode
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: true
          type: string
        - in: body
          description: Promo code details
          schema:
            type: object
            properties:
              code:
                type: string
              discount:
                type: number
              startDate:
                type: string
                example: YYYY/MM/DD
              endDate:
                type: string
                example: YYYY/MM/DD
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: true
              message:
                type: string
              data:
                type: object
                properties:
                  used:
                    type: number
                  code:
                    type: string
                  discount:
                    type: number
                  startDate:
                    type: string
                  endDate:
                    type: string
                  updatedAt:
                    type: string
                  createdAt:
                    type: string
        400:
          description: Bad request
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object  
        401:
          description: Unauthorized
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object  
  /promo/?promoId:  
    get:
      description: Returns all promo codes, can also be queried by promoId
      tags: 
        - Promocode
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: promoId
          type: string
          description: PromoId to be queried by
        - in: header
          name: Authorization
          required: true
          type: string        
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: true
              message:
                type: string
              data:
                type: object
                properties:
                  used:
                    type: number
                  code:
                    type: string
                  discount:
                    type: number
                  startDate:
                    type: string
                  endDate:
                    type: string
                  updatedAt:
                    type: string
                  createdAt:
                    type: string
        400:
          description: Bad request
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object  
        401:
          description: Unauthorized
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object
  /promo/{promoId}:
    delete:
      description: Returns all promo codes, can also be queried by promoId
      tags: 
        - Promocode
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: promoId
          type: string
          description: PromoId to be deleted
        - in: header
          name: Authorization
          required: true
          type: string        
      responses:
        200:
          description: okay
          schema:
            type: object
            properties:
              success:
                type: true
              message:
                type: string
              data:
                type: object                
        400:
          description: Bad request
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object  
        401:
          description: Unauthorized
          schema: 
            type: object
            properties:
              success:
                type: boolean
              message:
                type: string
              data:
                type: object




definitions:
  customerResponse:
    type: object
    properties:
      verified:
        type: boolean
      RoleId:
        type: number
      id:
        type: number
      name:
        type: string
      email:
        type: string
      phoneNumber:
        type: string
      password:
        type: string
      verificationToken:
        type: string
      updatedAt:
        type: string
      createdAt:
        type: string
  customer:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      password:
        type: string
      phoneNumber:
        type: string
  unathorisedResponse:
    400:
      description: Bad request error
      schema: 
        type: object
        properties:
          success:
            type: boolean
          message:
            type: string
            example: Unathorized access
          error:
            type: string 
          data:
            type: object
  staffresponse:
    type: object
    properties:
      verified: 
        type: boolean
        example: false
      verifiedPhoneNumber:
        type: boolean
        example: false
      id:
        type: Number
        example: 2
      firstName:
        type: string
        example: Sam
      lastName:
        type: string
        example: john
      middleName:
        type: string
        example: sarah
      phoneNumber:
        type: string
        example: 1222322424
      email:
        type: string
        example: john@example.com
      passwordHash:
        type: string
        example: wddsfsfsfdfefafaDD#$#RFSS
      verificationToken:
        type: string
        example: adadsdsdssdsdadadadssffs
      updatedAt:
        type: string
        example: 2023-11-11T18:11:16.896Z
      createdAt:
        type: string
        example: 2023-11-11T18:11:16.896Z
      RoleId:
        type: Number
        example: 2
  product:
    type: object
    properties:
      title:
        type: string
      metaTitle:
        type: string
      sellinPrice:
        type: number
      costPrice:
        type: number
      discount:
        type: number
      quantity:
        type: number
      longDescription:
        type: string
      expiryDate:
        type: string
  staff:
    type: object
    properties:
      firstName:
        type: string
      middleName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      roleId:
        type: number
      phoneNumber:
        type: string
  productresponse:
    type: object
    properties:
      views:
        type: number
      likes:
        type: number
      id:
        type: number
      title:
        type: string
      metaTitle:
        type: string
      sellingPrice:
        type: number
      costPrice:
        type: number
      discount:
        type: number
      quantity:
        type: number
      longDescription:
        type: string
      expiryDate:
        type: string
      updatedAt:
        type: string
      createdAt:
        type: string
  review:
    type: object
    properties:
      content:
        type: string
      rating:
        type: number
  reviewResponseObject:
    type: object
    properties:
      id:
        type: number
      content:
        type: string
      productId:
        type: number
      rating:
        type: number
      CustomerId:
        type: number
      updatedAt:
        type: string
      createdAt:
        type: string 
  badRequestResponse:
   description: Bad Request
   schema:
    type: object
    properties:
      success:
        type: boolean
      message:
        type: string
      error:
        type: string
      data:
        type: object
  notFoundErrorResponse:
    description: Not found
    schema: 
      type: object
      properties:
        success: 
          type: boolean
        message:
          type: string
        error:
          type: string
        data:
          type: object
  unauthorisedErrorResponse:
    description: Unauthorized Access
    schema:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        error:
          type: string
        data:
          type: object
  addressResponse:
    type: object
    properties:
      id:
        type: number
      defaultAddress:
        type: string
      line1:
        type: string
      line2: 
        type: string
      city:
        type: string
      State:
        type: string
      nearestLandmark:
        type: string
      country:
        type: string
      createdAt:
        type: string
      updatedAt:
        type: string
      CustomerId:
        type: number    